{"name":"Elem.js","tagline":"Small Javascript library for easy DOM manipulation by extending document, Element, NodeList, ...  class","body":"Functions\r\n===\r\n\r\nObject\r\n---\r\nFor this we've chosen to use static functions as not to burden the creation of objects.\r\n\r\n* Object.forEach(object, callback)\r\n\r\n    Loop through all your object attributes.\r\n\r\n    _Example :_\r\n\r\n    ```javascript\r\n    var myObject = { a : \"a\", b : \"b\" };\r\n    Object.forEach( myObject , function( key, value) { console.log(key+\" : \"+value); });\r\n    ```\r\n\r\n* Object.clone(object)\r\n\r\n    Deep clone an object.\r\n\r\n    _Example :_\r\n\r\n    ```javascript\r\n    var o2 = Object.clone(o1);\r\n    ```\r\n* Object.merge(object1, object2)\r\n\r\n    Gives back the result of a deep merge of two objects\r\n\r\n    _Example :_\r\n\r\n    ```javascript\r\nvar o1 = { a : 'a', b : { b1 : 'b1' } };\r\nvar o2 = { b : { b2 : 'b2' }, c : { c1 : 'c1' } };\r\nvar o3 = Object.merge(o1, o2);\r\nconsole.log(o1);\r\n// prints { a : 'a', b : { b1 : 'b1' } }\r\nconsole.log(o2);\r\n// prints { b : { b2 : 'b2' }, c : { c1 : 'c1' } }\r\nconsole.log(o3);\r\n// prints { a : 'a', b : {  b1 : 'b1', b2 : 'b2' }, c : { c1 : 'c1' } }\r\n    ```\r\n\r\nDocument\r\n---\r\n\r\n* document.elem(elemname, attributes, text)\r\n * with shortcuts for common HTML elements like div, span, table, ul, ...\r\n\r\n    Creates a new html element.\r\n\r\n    _Example :_\r\n\r\n    ```javascript\r\nvar div1 = document.elem('div',{class : 'example', id : 'id1'}, 'hello world');\r\n// or\r\nvar div2 = document.div({class : 'example', id : 'id2'}, 'hello world');\r\n    ```\r\n\r\n* document.getElem(selector)\r\n\r\n    Returns the result of a css query.\r\n\r\n    _Example :_\r\n\r\n    ```javascript\r\nvar a = document.getElem(\"form input#name\");\r\n// returns the input tag with id name that's inside a form\r\n    ```\r\n\r\n* document.getElemAll(selector)\r\n\r\n    Returns a list of tags as a result of a css query.\r\n\r\n    _Example :_\r\n\r\n    ```javascript\r\nvar a = document.getElemAll(\"form input[type=text]\");\r\n// returns all text input fields inside a form\r\n    ```\r\n* document.delElem(element)\r\n\r\n    Deletes tags from your DOM. You either give it the element itself (or a list of elements) as a parameter or you give it a string that will be evaluated as a document.getElemAll parameter.\r\n\r\n    _Example :_\r\n\r\n    ```javascript\r\nvar element = document.getElem(\"#id1\");\r\ndocument.delElem(element);\r\n// deletes the element with the id \"id1\"\r\ndocument.delElem(\"input\");\r\n// deletes all input tags\r\nvar divs = document.getElemAll(\"div\");\r\ndocument.delElem(divs);\r\n// deletes all divs\r\n    ```\r\n\r\nElement\r\n---\r\n\r\n* Element.prototype.getElem = function (selector)\r\n* Element.prototype.getElemAll = function (selector) \r\n* Element.prototype.del = function () \r\n* Element.prototype.elem = function (elemname, attr, text, returnparent) \r\n  * with shortcuts for common HTML elements like div, span, table, ul, ... \r\n* Element.prototype.attrib = function (attribute, value) \r\n* Element.prototype.setText = function (text) \r\n* Element.prototype.clearElem = function () \r\n* Element.prototype.on = function (event, listener, useCapture) \r\n* Element.prototype.off = function (event, listener, useCapture) \r\n\r\nNodeList\r\n---\r\n\r\n* NodeList.prototype.each = function (callback)\r\n* NodeList.prototype.attrib = function (attribute, value) \r\n* NodeList.prototype.elem = function (elemname, attr, text, returnparent) \r\n  * with shortcuts for common HTML elements like div, span, table, ul, ... \r\n* NodeList.prototype.del = function () \r\n* NodeList.prototype.getElem = function(selector)\r\n* NodeList.prototype.getElemAll = function(selector)\r\n* NodeList.prototype.on = function (event, listener, useCapture) \r\n* NodeList.prototype.off = function (event, listener, useCapture) \r\n\r\nExamples\r\n===\r\n\r\nCreate DOM element:\r\n\r\n\tdocument.elem(\"div\", {class: \"myClass\"}, \"text content\");\r\n\r\nCreate DOM element shortcuts:\r\n\r\n\tdocument.div({class: \"myClass\"}, \"text content\");\r\n\r\nFind element by CSS selector:\r\n\r\n\tdocument.getElem(\"#myDiv\");\r\n\tdocument.getElem(\"div[myAttr='myValue']\");\r\n\tdocument.getElem(\".myClass\");\r\n\r\nChaining:\r\n\r\n\tvar mySpan = document.getElem(\"body\").div({id: 'myDiv'}).span();","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}